#include<iostream>
using namespace std;

struct Node{
    Node* links[26];
    bool flag;

    //Functions

    bool containsKey(char ch){
        return (links[ch-'a']!=NULL);
    }

    void put(char ch, Node* node){
        links[ch-'a'] = node;
    }

    Node* get(char ch){
        return links[ch - 'a'];
    }

    void setEnd(){
        flag   = true;
    }

    bool isEnd(){
        return flag;
    }
};

class Trie{
    private:
        Node* root;
    public:
        Trie();
        void insert(string);
        bool search(string);
        bool isprefix(string);
};

Trie ::Trie(){
    root = new Node();
}

void Trie::insert(string word){
    Node *node = root;
    for(int i=0;i<word.length();i++){
        if(!node->containsKey(word[i])){
            node->put(word[i],new Node());
        }
        node = node->get(word[i]);
    }
    node->setEnd();
    return;
}

bool Trie::search(string word){
    Node* node = root;
    for(int i=0;i<word.length();i++){
        if(!node->containsKey(word[i])){
            return false;
        }
        node = node->get(word[i]);
    }
    return node->isEnd();
}


bool Trie::isprefix(string prefix){
    Node* node  = root;
    for(int i=0;i<prefix.size();i++){
        if(!node->containsKey(prefix[i])){
            return false;
        }
        node = node->get(prefix[i]);
    }
    return (node!=NULL);
}


int main(){
    Trie T1;
    string s = "madhurank";
    string s1 = "hegde";
    T1.insert(s);
    T1.insert(s1);
    cout<<T1.search("madhu")<<" "<<T1.search("madhurank")<<" "<<T1.isprefix("heg")<<endl;
    return 0;
}
