#include<stdio.h>
#include<stdlib.h>
#define MAXSIZE 5
typedef struct _queue{
    int *arr;
    int front;
    int rear;
}cqueue;


void enqueue(cqueue*q,int ele){
    if((q->front==0 && q->rear==MAXSIZE-1) || ((q->rear+1)%MAXSIZE == q->front)){
        printf("Queue Overflow\n");
        return;
    }
    if(q->front==-1){
        q->front=0;
    }
    q->rear = (q->rear+1)%MAXSIZE;
    q->arr[q->rear] = ele;
    printf("%d has been Enqueued\n",ele);
    return;
}


void dequeue(cqueue* q){
    if((q->front==-1)){
        printf("Queue Underflow\n");
        return;
    }
    int ele = q->arr[q->front];
    if(q->rear==q->front){
        q->front=-1;
        q->rear=-1;
    }
    else q->front = (q->front+1)%MAXSIZE;
    printf("%d has been deleted\n",ele);
    return;
}
void display(cqueue *q){
    if(q->front==-1){
        printf("Queue is Empty\n");
        return;
    }
    for(int i=q->front;i!=q->rear;i=(i+1)%MAXSIZE){
        printf("%d ",q->arr[i]);
    }
    printf("%d\n",q->arr[q->rear]);
    return;
}
int main(){
    cqueue q;
    q.arr = (int *)malloc(sizeof(MAXSIZE));
    q.front = -1;
    q.rear  = -1;
    int choice, ele;
    do{
        printf("Enter Your Choice\n");
        printf("1.EnQueue\n2.DeQueue\n3.Display\n4.Exit\n");
        scanf("%d",&choice);
        switch(choice){
            case 1: printf("Enter the Element\n");
                    scanf("%d",&ele);
                    enqueue(&q,ele);
                    break;
            case 2 :dequeue(&q);
                    break;
            case 3 :display(&q);
                    break;
            case 4 : printf("End Of Circular Queue\n");
                    break;
            default: printf("Invalid Choice\n");
                    break;
        }
    }while(choice!=4);
    return 0;
}
