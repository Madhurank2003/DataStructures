//Program to Create a Tree from User Input

#include <iostream>
#include<bits/stdc++.h>
using namespace std;


struct node{
    int data;
    struct node* left;
    struct node* right;
};


node* create(){
    cout<<"Enter the values to be inserted, -1 to indicate the end\n";
    node* root = new node;
    cin>>root->data;
    queue<node*> q;
    q.push(root);
    while(1){
        int n = q.size();
        for(int i=0;i<n;i++){
            node* temp = q.front();
            q.pop();
            node* newleft = new node;
            newleft->right=newleft->left = NULL;
            cin>>newleft->data;
            if(newleft->data==-1){
                return root;
            }
            temp->left = newleft;
            node* newright = new node;
            newright->left =  newright->right = NULL;
            cin>>newright->data;
            if(newright->data==-1){
                return root;
            }
            temp->right = newright;
            q.push(newleft);
            q.push(newright);
        }
    }
}



void dfs(node **root, vector<int>& vp){
    if(*root==NULL){
        return;
    }
    vp.push_back((*root)->data);
    dfs(&(*root)->left,vp);
    dfs(&(*root)->right,vp);
    
}

int main()
{
    node* root = create();
    queue<node*> q;
    q.push(root);
    vector<int> vp;
    while(!q.empty()){
        int n = q.size();
        for(int i=0;i<n;i++){
            node* temp = q.front();
            q.pop();
            vp.push_back(temp->data);
            if(temp->left){
                q.push(temp->left);
            }
            if(temp->right){
                q.push(temp->right);
            }
        }
    }
    
    cout<<"\nLevel Order Traversal of the Tree\n";
    for(int x : vp ){
        cout<<x<<" ";
    }
    cout<<endl;
    cout<<"PreOrder Traversal Of the Tree\n";
    
    vector<int> v;
    dfs(&root,v);
    for(int x: v){
        cout<<x<<" ";
    }
    cout<<endl;
    
    return 0;
}
